<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>day-02-数据类型转换、运算符、方法入门</title>
      <link href="post/16c2569a/"/>
      <url>post/16c2569a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第02天【数据类型转换，运算符，方法入门】"><a href="#第02天【数据类型转换，运算符，方法入门】" class="headerlink" title="第02天【数据类型转换，运算符，方法入门】"></a>第02天【数据类型转换，运算符，方法入门】</h1><h1 id="第一章数据类型转换"><a href="#第一章数据类型转换" class="headerlink" title="第一章数据类型转换"></a>第一章数据类型转换</h1><p>Java程序中要求参与的计算的数据，必须要保证数据类型的一致性，如果数据类型不一致将发生类型的转换。</p><h2 id="1-1自动转换"><a href="#1-1自动转换" class="headerlink" title="1. 1自动转换"></a>1. 1自动转换</h2><p>一个<code>int</code>类型变量和一个<code>byte</code>类型变量进行加法运算，结果会是什么数据类型？</p><pre><code>int i =  1 ;byte b =  2 ;</code></pre><p>运算结果，变量的类型将是<code>int</code>类型，这就是出现了数据类型的自动类型转换现象。</p><ul><li>自动转换：将<strong>取值范围小的类型</strong>自动提升为<strong>取值范围大的类型</strong> 。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span>  <span class="token number">1</span> <span class="token punctuation">;</span>    <span class="token keyword">byte</span> b <span class="token operator">=</span>  <span class="token number">2</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// byte x = b + i; // 报错</span>    <span class="token comment" spellcheck="true">//int类型和byte类型运算，结果是int类型</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> b <span class="token operator">+</span> i<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="转换原理图解"><a href="#转换原理图解" class="headerlink" title="转换原理图解"></a>转换原理图解</h3><p><code>byte</code>类型内存占有1个字节，在和<code>int</code>类型运算时会提升为<code>int</code>类型，自动补充3个字节，因此计算后的结果还是<code>int</code>类<br>型。</p><p><img src="%E8%BD%AC%E6%8D%A2%E5%8E%9F%E7%90%86.png"></p><p>同样道理，当一个<code>int</code>类型变量和一个<code>double</code>变量运算时，<code>int</code>类型将会自动提升为<code>double</code>类型进行运算。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span>  <span class="token number">1</span> <span class="token punctuation">;</span>    <span class="token keyword">double</span> d <span class="token operator">=</span>  <span class="token number">2</span><span class="token punctuation">.</span> <span class="token number">5</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//int类型和double类型运算，结果是double类型</span>    <span class="token comment" spellcheck="true">//int类型会提升为double类型</span>    <span class="token keyword">double</span> e <span class="token operator">=</span> d<span class="token operator">+</span>i<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h3><p>范围小的类型向范围大的类型提升，byte，short，char运算时直接提升为int。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">byte</span>、<span class="token keyword">short</span>、<span class="token keyword">char</span>‐‐<span class="token operator">></span><span class="token keyword">int</span>‐‐<span class="token operator">></span><span class="token keyword">long</span>‐‐<span class="token operator">></span><span class="token keyword">float</span>‐‐<span class="token operator">></span><span class="token keyword">double</span></code></pre><h2 id="1-2强制转换"><a href="#1-2强制转换" class="headerlink" title="1. 2强制转换"></a>1. 2强制转换</h2><p>将<code>1. 5</code>赋值到<code>int</code>类型变量会发生什么？产生编译失败，肯定无法赋值。</p><pre><code>int i =  1. 5 ; // 错误</code></pre><p><code>double</code>类型的内存8个字节，<code>int</code>类型的内存4个字节。<code>1. 5</code>是<code>double</code>类型，取值范围大于<code>int</code>。可以理解为<code>double</code>是8升的水壶，<code>int</code>是4升的水壶，不能把大水壶中的水直接放进小水壶去。</p><p>想要赋值成功，只有通过强制类型转换，将<code>double</code>类型强制转换成<code>int</code>类型才能赋值。</p><ul><li>强制类型转换：将取值范围大的类型强制转换成取值范围小的类型。</li></ul><p>比较而言，自动转换是Java自动执行的，而强制转换需要我们自己手动执行。</p><p>转换格式：</p><p><code>数据类型变量名=（数据类型）被转数据值；</code></p><p>将1. 5赋值到int类型，代码修改为：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// double类型数据强制转成int类型，直接去掉小数点。</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">.</span> <span class="token number">5</span> <span class="token punctuation">;</span></code></pre><p>同样道理，当一个<code>short</code>类型与<code>1</code>相加，我们知道会类型提升，但是还想给结果赋值给<code>short</code>类型变量，就需要强制转换。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//short类型变量，内存中 2 个字节</span>    <span class="token keyword">short</span> s <span class="token operator">=</span>  <span class="token number">1</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    出现编译失败    s和 1 做运算的时候， 1 是int类型，s会被提升为int类型    s+ 1 后的结果是int类型，将结果在赋值会short类型时发生错误    short内存 2 个字节，int类型 4 个字节    必须将int强制转成short才能完成赋值    */</span>    s <span class="token operator">=</span> s <span class="token operator">+</span>  <span class="token number">1</span> ；<span class="token comment" spellcheck="true">//编译失败</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s<span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译成功</span><span class="token punctuation">}</span></code></pre><h3 id="转换原理图解-1"><a href="#转换原理图解-1" class="headerlink" title="转换原理图解"></a>转换原理图解</h3><p><img src="short%E8%BD%AC%E6%8D%A2%E5%8E%9F%E7%90%86.png"></p><h3 id="强烈注意"><a href="#强烈注意" class="headerlink" title="强烈注意"></a>强烈注意</h3><ul><li>浮点转成整数，直接取消小数点，可能造成数据损失精度。</li><li><code>int</code> 强制转成<code>short</code> 砍掉 2 个字节，可能造成数据丢失。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定义s为short范围内最大值</span><span class="token keyword">short</span> s <span class="token operator">=</span>  <span class="token number">32767</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 运算后，强制转换，砍掉 2 个字节后会出现不确定的结果</span>s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s <span class="token operator">+</span>  <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="1-3-ASCII编码表"><a href="#1-3-ASCII编码表" class="headerlink" title="1. 3 ASCII编码表"></a>1. 3 ASCII编码表</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//字符类型变量</span>    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span>  <span class="token number">1</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//字符类型和int类型计算</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果是 98</span><span class="token punctuation">}</span></code></pre><p>在计算机的内部都是二进制的0，1数据，如何让计算机可以直接识别人类文字的问题呢？就产生出了编码表的概念。</p><ul><li><p><strong>编码表</strong>：就是将人类的文字和一个十进制数进行对应起来组成一张表格。</p><p>人们就规定：</p><table><thead><tr><th align="center">字符</th><th align="center">数值</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">48</td></tr><tr><td align="center">9</td><td align="center">57</td></tr><tr><td align="center">A</td><td align="center">65</td></tr><tr><td align="center">Z</td><td align="center">90</td></tr><tr><td align="center">a</td><td align="center">97</td></tr><tr><td align="center">z</td><td align="center">122</td></tr></tbody></table><p>将所有英文字母，数字，符号都和十进制进行了对应，因此产生了世界上第一张编码表ASCII（American Standard Code for Information Interchange 美国标准信息交换码）。</p><div class="row">    <embed src="./02-ASCII码表.pdf" width="100%" height="550" type="application/pdf"></div><blockquote><p>小贴士：<br>在char类型和int类型计算的过程中，char类型的字符先查询编码表，得到 97 ，再和 1 求和，结果为 98 。char类型提升<br>为了int类型。char类型内存 2 个字节，int类型内存 4 个字节。</p></blockquote></li></ul><h1 id="第二章运算符"><a href="#第二章运算符" class="headerlink" title="第二章运算符"></a>第二章运算符</h1><h2 id="2-1算数运算符"><a href="#2-1算数运算符" class="headerlink" title="2. 1算数运算符"></a>2. 1算数运算符</h2><table><thead><tr><th align="center">算数运算符包括：</th><th align="center"></th></tr></thead><tbody><tr><td align="center"><code>+</code></td><td align="center">加法运算，字符串连接运算</td></tr><tr><td align="center"><code>-</code></td><td align="center">减法运算</td></tr><tr><td align="center"><code>*</code></td><td align="center">乘法运算</td></tr><tr><td align="center"><code>/</code></td><td align="center">除法运算</td></tr><tr><td align="center"><code>%</code></td><td align="center">取模运算，两个数字相除取余数</td></tr><tr><td align="center"><code>++、--</code></td><td align="center">自增自减运算</td></tr></tbody></table><p>Java中，整体使用以上运算符，无论如何计算，也不会得到小数。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span>  <span class="token number">1234</span> <span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算结果是 1000</span><span class="token punctuation">}</span></code></pre><ul><li><p><code>++</code>运算，变量自己增长1。反之，<code>--</code>计算，变量自己减少1，使用与<code>++</code>一致。</p><ul><li><p>独立运算：</p><ul><li>变量在独立运算时，<code>前++</code>和<code>后++</code>没有区别。</li><li>变量<code>前++</code> ：例如：<code>++i</code></li><li>变量后++ ：例如：<code>--i</code></li></ul></li><li><p>混合运算：</p><ul><li><p>和其他变量放在一起，<code>前++</code>和<code>后++</code>就产生了不同。</p></li><li><p>变量前++ ：变量a自己加 1 ，将加 1 后的结果赋值给b，也就是说a先计算。a和b的结果都是 2 。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span>  <span class="token number">1</span> <span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算结果是 2</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算结果是 2</span><span class="token punctuation">}</span></code></pre></li><li><p>变量后++ ：变量a先把自己的值 1 ，赋值给变量b，此时变量b的值就是 1 ，变量a自己再加 1 。a的结果是 2 ，b的结果是 1 。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span>  <span class="token number">1</span> <span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算结果是 2</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算结果是 1</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li><li><p><code>+</code>符号在字符串中的操作：</p><ul><li><code>+</code>符号在遇到字符串的时候，表示<strong>连接，拼接</strong>的含义。</li><li>“a”+”b”的结果是“ab”，连接含义</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 5 + 5 ="</span><span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出 5 + 5 = 55</span><span class="token punctuation">}</span></code></pre><h2 id="2-2赋值运算符"><a href="#2-2赋值运算符" class="headerlink" title="2. 2赋值运算符"></a>2. 2赋值运算符</h2><table><thead><tr><th align="center">赋值运算符包括：</th><th align="center"></th></tr></thead><tbody><tr><td align="center"><code>=</code></td><td align="center">等于号</td></tr><tr><td align="center"><code>+=</code></td><td align="center">加等于</td></tr><tr><td align="center"><code>-=</code></td><td align="center">减等于</td></tr><tr><td align="center"><code>*=</code></td><td align="center">乘等于</td></tr><tr><td align="center"><code>/=</code></td><td align="center">除等于</td></tr><tr><td align="center"><code>%=</code></td><td align="center">取模等于</td></tr></tbody></table><ul><li>赋值运算符，就是将符号右边的值，赋给左边的变量。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span>  <span class="token number">5</span> <span class="token punctuation">;</span>    i<span class="token operator">+=</span> <span class="token number">5</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算方式 i=i+ 5  变量i先加 5 ，再赋值变量i</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出结果是 10 </span><span class="token punctuation">}</span></code></pre><h2 id="2-3比较运算符"><a href="#2-3比较运算符" class="headerlink" title="2. 3比较运算符"></a>2. 3比较运算符</h2><table><thead><tr><th align="center">比较运算符包括：</th><th align="center"></th></tr></thead><tbody><tr><td align="center"><code>==</code></td><td align="center">比较符号两边数据是否相等，相等结果是true。</td></tr><tr><td align="center"><code>&lt;</code></td><td align="center">比较符号左边的数据是否小于右边的数据，如果小于结果是true。</td></tr><tr><td align="center"><code>&gt;</code></td><td align="center">比较符号左边的数据是否大于右边的数据，如果大于结果是true。</td></tr><tr><td align="center"><code>&lt;=</code></td><td align="center">比较符号左边的数据是否小于或者等于右边的数据，如果小于或者等于结果是true。</td></tr><tr><td align="center"><code>&gt;=</code></td><td align="center">比较符号左边的数据是否大于或者等于右边的数据，如果大于或者等于结果是true。</td></tr><tr><td align="center"><code>!=</code></td><td align="center">不等于符号 ，如果符号两边的数据不相等，结果是true。</td></tr></tbody></table><ul><li>比较运算符，是两个数据之间进行比较的运算，运算结果都是布尔值<code>true</code>或者false ``。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token operator">&lt;=</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token operator">>=</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token operator">!=</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token punctuation">}</span></code></pre><h2 id="2-4逻辑运算符"><a href="#2-4逻辑运算符" class="headerlink" title="2. 4逻辑运算符"></a>2. 4逻辑运算符</h2><table><thead><tr><th align="center">逻辑运算符包括：</th><th align="center"></th></tr></thead><tbody><tr><td align="center"><code>&amp;&amp;  </code> 短路与</td><td align="center">1. 两边都是true，结果是true<br>2. 一边是false，结果是false<br>短路特点：符号左边是false，右边不再运算</td></tr><tr><td align="center">`</td><td align="center"></td></tr><tr><td align="center"><code>！</code>取反</td><td align="center">1.! true 结果是false<br>2.! false结果是true</td></tr></tbody></table><ul><li>逻辑运算符，是用来连接两个布尔类型结果的运算符，运算结果都是布尔值true或者false</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false，右边不计算</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//falase</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true，右边不计算</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token punctuation">}</span></code></pre><h2 id="2-5三元运算符"><a href="#2-5三元运算符" class="headerlink" title="2. 5三元运算符"></a>2. 5三元运算符</h2><ul><li>三元运算符格式：</li></ul><p> <code>数据类型变量名=布尔类型表达式？结果1：结果2</code></p><ul><li>三元运算符计算方式：<ul><li>布尔类型表达式结果是true，三元运算符整体结果为结果 1 ，赋值给变量。</li><li>布尔类型表达式结果是false，三元运算符整体结果为结果 2 ，赋值给变量。</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span>  <span class="token number">100</span>  <span class="token operator">:</span>  <span class="token number">200</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 200</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token number">3</span> <span class="token operator">&lt;=</span> <span class="token number">4</span> <span class="token operator">?</span>  <span class="token number">500</span>  <span class="token operator">:</span>  <span class="token number">600</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 500</span><span class="token punctuation">}</span></code></pre><h1 id="第三章方法入门"><a href="#第三章方法入门" class="headerlink" title="第三章方法入门"></a>第三章方法入门</h1><h2 id="3-1概述"><a href="#3-1概述" class="headerlink" title="3. 1概述"></a>3. 1概述</h2><p>我们在学习运算符的时候，都为每个运算符单独的创建一个新的类和main方法，我们会发现这样编写代码非常的繁琐，而且重复的代码过多。能否避免这些重复的代码呢 ，就需要使用方法来实现。</p><ul><li>方法：就是将一个功能抽取出来，把代码单独定义在一个大括号内，形成一个单独的功能。</li></ul><p>当我们需要这个功能的时候，就可以去调用。这样即实现了代码的替代性，也解决了代码冗余的现象。</p><h2 id="3-2方法的定义"><a href="#3-2方法的定义" class="headerlink" title="3. 2方法的定义"></a>3. 2方法的定义</h2><ul><li><p>定义格式：</p><pre class=" language-java"><code class="language-java"> 修饰符返回值类型方法名（参数列表）｛     代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> <span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li><p>定义格式解释：</p><ul><li>修饰符： 目前固定写法 <code>public static</code> 。</li><li>返回值类型： 目前固定写法 <code>void</code> ，其他返回值类型在后面讲。</li><li>方法名：为我们定义的方法起名，满足标识符的规范，用来调用方法。</li><li>参数列表： 目前无参数， 带有参数的方法在后面讲。</li><li>return：方法结束。因为返回值类型是void，方法大括号内的return可以不写。</li></ul></li><li><p>举例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">methodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="3-3方法的调用"><a href="#3-3方法的调用" class="headerlink" title="3. 3方法的调用"></a>3. 3方法的调用</h2><p>方法在定义完毕后，方法不会自己运行，必须被调用才能执行，我们可以在主方法main中来调用我们自己定义好的方法。在主方法中，直接写要调用的方法名字就可以调用了。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//调用定义的方法method</span>    <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义方法，被main方法调用</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自己定义的方法，需要被main调用运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3-4调用练习"><a href="#3-4调用练习" class="headerlink" title="3. 4调用练习"></a>3. 4调用练习</h2><p>将三元运算符代码抽取到自定义的方法中，并调用。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//调用定义的方法operator</span>    <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义方法，方法中定义三元运算符</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span>  <span class="token number">0</span> <span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span>  <span class="token number">100</span> <span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span>  <span class="token number">0</span>  <span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token number">3</span> <span class="token operator">&lt;=</span> <span class="token number">4</span> <span class="token operator">?</span>  <span class="token number">500</span> <span class="token operator">:</span> <span class="token number">600</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3-5注意"><a href="#3-5注意" class="headerlink" title="3. 5注意"></a>3. 5注意</h2><ul><li>方法定义注意事项：<ul><li> 方法必须定义在一类中方法外</li><li> 方法不能定义在另一个方法的里面</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//正确写法，类中，main方法外面可以定义方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//错误写法，一个方法不能定义在另一方法内部</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="第四章JShell脚本工具"><a href="#第四章JShell脚本工具" class="headerlink" title="第四章JShell脚本工具"></a>第四章JShell脚本工具</h1><h2 id="JShell脚本工具是JDK-9的新特性"><a href="#JShell脚本工具是JDK-9的新特性" class="headerlink" title="JShell脚本工具是JDK 9的新特性"></a>JShell脚本工具是JDK 9的新特性</h2><p>什么时候会用到<code>JShell</code>工具呢，当我们编写的代码非常少的时候，而又不愿意编写类，main方法，也不愿意去编译和运行，这个时候可以使用JShell工具。</p><p>启动JShell工具，在DOS命令行直接输入JShell命令。</p><p><img src="JShell.png"></p><p>接下来可以编写Java代码，无需编写类和方法，直接编写方法中的代码即可，同时无需编译和运行，直接回车即可</p><p><img src="JShell%E8%BF%90%E8%A1%8C.png"></p><blockquote><p>小贴士：</p><p>JShell工具，只适合片段代码的测试，开发更多内容，建议编写在方法中。</p></blockquote><h1 id="第五章扩展知识点"><a href="#第五章扩展知识点" class="headerlink" title="第五章扩展知识点"></a>第五章扩展知识点</h1><h2 id="5-1-符号的扩展"><a href="#5-1-符号的扩展" class="headerlink" title="5. 1 + =符号的扩展"></a>5. 1 + =符号的扩展</h2><p>下面的程序有问题吗？</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">short</span> s <span class="token operator">=</span>  <span class="token number">1</span> <span class="token punctuation">;</span>    s<span class="token operator">+=</span> <span class="token number">1</span> <span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>分析：<code>s + = 1</code>逻辑上平均值是<code>s = s + 1</code>计算结果被提升为<code>int</code>类型，再向<code>short</code>赋值值时发生错误，因为不能将取值范围大的类型赋值到取值范围小的类型。，但是，<code>s = s + 1进行两次运算</code>，<code>+ =</code>是一个运算符，只运算一次，并带有<strong>强制转换</strong>的特点，从而<code>s + = 1</code>就是<code>=（short）（s + 1）</code>，因此程序没有问题编译通过，运行结果是2。</p><h2 id="5-2常量和变量的运算"><a href="#5-2常量和变量的运算" class="headerlink" title="5. 2常量和变量的运算"></a>5. 2常量和变量的运算</h2><p>下面的程序有问题吗？</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>    <span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span>    <span class="token keyword">byte</span> b3 <span class="token operator">=</span> <span class="token number">1</span>  <span class="token operator">+</span>  <span class="token number">2</span> <span class="token punctuation">;</span>    <span class="token keyword">byte</span> b4 <span class="token operator">=</span>b1  <span class="token operator">+</span> b2 <span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b3 <span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b4 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>分析：<code>b3= 1 + 2</code>，<code>1</code>和2<code>是常量</code>，为固定不变的数据，在编译的时候（编译器的javac），已经确定了<code>1 + 2</code>查询查询结果的并没有超过<code>byte</code>类型的取值范围，可以赋予值给变量<code>b3</code>，因此<code>b3 = 1 + 2</code>是正确的。</p><p>反之，<code>b4 = b1 + b2</code>，<code>b1</code>和<code>b2</code>是变量，变量的值是可能变化的，在编译的时候，编译器的javac不确定<code>b1 + b2</code>的结果是什么，因此会将结果以<code>int</code>类型进行处理，所以<code>int</code>类型不能赋值给<code>byte</code>类型，因此编译失败。</p><p>在jshell中体现：</p><p><img src="%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 博客添加pdf 插件</title>
      <link href="post/a24fd5d2/"/>
      <url>post/a24fd5d2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、安装插件"><a href="#一、安装插件" class="headerlink" title="一、安装插件"></a>一、安装插件</h1><p><code>npm install --save hexo-pdf</code></p><h1 id="二、编写"><a href="#二、编写" class="headerlink" title="二、编写"></a>二、编写</h1><blockquote><p>在成的md文件中添加pdf</p></blockquote><ol><li>外部链接：<br><code>{% pdf http://7xov2f.com1.z0.glb.clouddn.com/bash_freshman.pdf %}</code></li><li>本地连接：<br><code>{% pdf ./pdf名字.pdf %}</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、Mybatie框架</title>
      <link href="post/455c316f/"/>
      <url>post/455c316f/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、Mybatis–-day01"><a href="#一、Mybatis–-day01" class="headerlink" title="一、Mybatis– day01"></a>一、Mybatis– day01</h1><h2 id="1、学习目标"><a href="#1、学习目标" class="headerlink" title="1、学习目标"></a>1、学习目标</h2><ol><li>能够搭建mybatis开发的环境</li><li>能够编写mybatis的入门程序</li><li>理解自定义mybatis的过程</li></ol><h2 id="2、学习指南"><a href="#2、学习指南" class="headerlink" title="2、学习指南"></a>2、学习指南</h2><ol><li>搭建mybatis开发的环境</li><li>编写mybatis的入门程序</li><li>自定义mybatis</li></ol><h2 id="3、什么是框架"><a href="#3、什么是框架" class="headerlink" title="3、什么是框架"></a>3、什么是框架</h2><p>​    它是我们软件开发中的一套解决方案，不同框架解决的是不同的问题。</p><p>​    使用框架的好处：</p><p>​                                框架封装了很多的细节，-使开发者可以使用极简的方式实现功能。大大提高开发效率。</p><h2 id="4、三层架构"><a href="#4、三层架构" class="headerlink" title="4、三层架构"></a>4、三层架构</h2><p>​    表现层：</p><p>​        是用于展示数据的</p><p>​    业务层</p><p>​        是处理业务需求</p><p>​    持久层</p><p>​        是和数据库交互的</p><p><img src="01%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84.png"></p><h2 id="5、持久层技术解决方案"><a href="#5、持久层技术解决方案" class="headerlink" title="5、持久层技术解决方案"></a>5、持久层技术解决方案</h2><p>​    JDBC技术：</p><p>​                    Connection</p><p>​                    PreparedStatement</p><p>​                    ResultSet</p><p>​    Spring的jdbcTemplate：</p><p>​                    Spring中对jdbc的简单封装</p><p>​    Apache的DBUtils:</p><p>​                    它和Spring的jdbcTemplate很像，也是对jdbc的简单封装</p><p>​    以上这些都不是框架</p><p>​                    JDBC 是规范</p><p>​                    Spring的jdbcTemplate和Apache的DBUtils都只是工具类</p><h2 id="6、mybatis的概述"><a href="#6、mybatis的概述" class="headerlink" title="6、mybatis的概述"></a>6、mybatis的概述</h2><p>​    mybatis是一个持久层框架，用Java编写的。</p><p><img src="02%E6%8C%81%E4%B9%85%E5%B1%82%E6%80%BB%E5%9B%BE.jpg"></p><p>​    它封装了jdbc操作的很多细节，使开发者只需要关注sql语句本身，而无需关注注册驱动，创建连接等繁琐过程</p><p>​    它使用了ORM思想实现了结果集的封装。</p><p>​    ORM：</p><p>​            Object Relational Mappging        对象关系映射</p><p>​            简单来说：</p><p>​                        就是数据库表和实现类及实体类的属性对应起来，让我们可以操作实体类就实现操作数据库表。</p><p>​                            user                                                                User</p><p>​                            id                                                                    userId</p><p>​                            user_name                                                     userName</p><p>今天需要做到：</p><p>​                    实体类中的属性和数据库表的字段名称保持一致。</p><p>​                            user                                                                User</p><p>​                            id                                                                    id</p><p>​                            user_name                                                     user_name</p><h2 id="7、mybatis的入门"><a href="#7、mybatis的入门" class="headerlink" title="7、mybatis的入门"></a>7、mybatis的入门</h2><ol><li><p>mybatis的环境搭建</p><p>​    第一步：创建maven工程并导入坐标</p><p>​    第二步：创建实体类和dao的接口</p><p>​    第三步：创建Mybatis的主配置文件</p><p>​                                    SqlMapConifg.xml</p><p>​    第四步：创建映射配置文件</p><p>​                                    UserDao.xml\</p><p>环境搭建的注意事项：</p><p>​            第一个：创建UserDao.xml 和 UserDao.java时  名称是为了和我们之前的知识保持一致。</p><p>​                            在Mybatis中它把持久层的操作接口名称和映射文件也叫做：Mapper</p><p>​                            所以：UserDao 和 UserMapper是一样的</p><p>​            第二个：在idea中创建目录的时候，它和包是不一样的</p><p>​                            包在创建时：com.jiangqi.dao它是三级结构</p><p>​                            目录在创建时：com.jiangqi.dao它是一级目录</p><p>​            第三个：mybatis的映射配置文件位置必须和dao的结构保持相同</p><p>​            第四个：映射配置文件的mapper标签  namespace 属性的取值必须是dao接口的全限定类名</p><p>​            第五个：映射配置文件的操作设置（select），id 属性的取值必须是dao接口的方法名</p><p>好处：</p><p>​        当我们遵守了第三，四，五条之后，我们在开发中就无需再写dao的实现类</p></li><li><p>mybatis的入门案例</p><p>​    第一步：读取配置文件</p><p>​    第二步：创建SqlSessionFactory工厂</p><p>​    第三步：创建SqlSession</p><p>​    第四步：创建Dao接口的代理对象</p><p>​    第五步：执行Dao中的方法</p><p>​    第六步：释放资源</p><p>​    </p><p>​    注意事项：</p><p>​                <strong>不要忘记在映射配置中告知mybatis要封装到那个实体类中</strong></p><p>​                <strong>配置的方式：指定实体类的全限定类名</strong></p><p>​    mybatis基于注解的入门案例：</p><p>​                <u>把UserDao.xml移除，在dao接口的方法上使用@Select注解，并且指定SQL语句</u>，同时需要在SqlMapConfig.xml中的mapper配置时，使用class属性指定dao接口的全限定类名。</p></li></ol><p>明确：</p><p>​            我们在实际开发中，都是越简便越好，所以都是采用不写dao实现类的方式。</p><p>​            不管使用XML还是注解配置。但是Mybatis它是支持写dao实现类的。</p><p><img src="%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B%E7%9A%84%E5%88%86%E6%9E%90.png"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.读取配置文件</span>    InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.创建SqlSessionFactory工厂</span>    <span class="token comment" spellcheck="true">/*创建工厂mabatis使用了构建者模式*/</span><span class="token comment" spellcheck="true">/*构建者模式：把对象的创建细节隐藏，使使用者直接调用方法即可拿到对象*/</span>    SqlSessionFactoryBuilder builder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SqlSessionFactory factory<span class="token operator">=</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.使用工厂生产SqlSession对象</span>    <span class="token comment" spellcheck="true">/*生产SqlSession使用了工厂模式*/</span><span class="token comment" spellcheck="true">/*优势：解耦（降低类之间的依赖关系）*/</span>    SqlSession session<span class="token operator">=</span>factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.使用SqlSession创建Dao接口的代理对象</span>    <span class="token comment" spellcheck="true">/*创建Dao接口实现类使用了代理模式*/</span><span class="token comment" spellcheck="true">/*优势：不修改源码的基础上对已有方法的增强*/</span>    UserDao userDao<span class="token operator">=</span>session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//5.使用代理对象执行方法</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users<span class="token operator">=</span>userDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>User user<span class="token operator">:</span>users<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//6.释放资源</span>    session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="8、自定义Mybatis的分析"><a href="#8、自定义Mybatis的分析" class="headerlink" title="8、自定义Mybatis的分析"></a>8、自定义Mybatis的分析</h2><p>​    mybatis 在使用代理dao的方式实现增删改查时做什么事？</p><p>​                    两件事：</p><p>​                            第一：创建代理对象</p><p>​                            第二：在代理对象中调用selectList</p><p><img src="%E8%87%AA%E5%AE%9A%E4%B9%89Mybatis%E5%88%86%E6%9E%90.png"></p><h1 id="二、Mybatis-day02"><a href="#二、Mybatis-day02" class="headerlink" title="二、Mybatis-day02"></a>二、Mybatis-day02</h1><h2 id="1、学习目标-1"><a href="#1、学习目标-1" class="headerlink" title="1、学习目标"></a>1、学习目标</h2><ol><li><p>mybatis的curd(基于代理Dao的方式)</p></li><li><p>mybatis的参数深入及结果集的深入</p></li><li><p>mybatis中基于传统dao的方式（编写dao的实现类）———–了解内容</p></li><li><p>mybatis中的配置（主配置文件：SqlMapConfig.xml）</p><p>​        properties标签</p><p>​        typeAliases标签                            —解释Integer的写法</p><p>​        mappers标签</p></li></ol><hr><p>OGNL 表达式：</p><p>​                    Object        Graphic        Navigation        Language</p><p>​                    对象            图                    导航                    语言</p><p>​                    他是通过对象的取值方法来获取数据的。在写法上把get省略。</p><p>​                比如：我们获取用户的名称</p><p>​                                类中的写法：user.getUserName();</p><p>​                                ONGL表示写法：user.username</p><p>​                mybatis 中为什么能直接写username,而不用user. </p><p>​                        是因为在parameterType中已经提供了属性所属的类。</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day-01-前言、入门程序、常量、变量</title>
      <link href="post/490ca535/"/>
      <url>post/490ca535/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="day-01-【前言、入门程序、常量、变量】"><a href="#day-01-【前言、入门程序、常量、变量】" class="headerlink" title="day 01 【前言、入门程序、常量、变量】"></a>day 01 【前言、入门程序、常量、变量】</h1><h1 id="第一章-开发前言"><a href="#第一章-开发前言" class="headerlink" title="第一章 开发前言"></a>第一章 开发前言</h1><h2 id="1-1-Java语言概述"><a href="#1-1-Java语言概述" class="headerlink" title="1. 1 Java语言概述"></a>1. 1 Java语言概述</h2><h2 id="什么是Java语言"><a href="#什么是Java语言" class="headerlink" title="什么是Java语言"></a>什么是Java语言</h2><p>Java语言是美国Sun公司（Stanford University Network），在 1995 年推出的高级的编程语言。所谓编程语言，是<br>计算机的语言，人们可以使用编程语言对计算机下达命令，让计算机完成人们需要的功能。</p><h2 id="Java语言发展历史"><a href="#Java语言发展历史" class="headerlink" title="Java语言发展历史"></a>Java语言发展历史</h2><blockquote><p>1995 年Sun公司发布Java 1. 0 版本<br>      1997 年发布Java 1. 1 版本<br>       1998 年发布Java 1. 2 版本<br>      2000 年发布Java 1. 3 版本<br>       2002 年发布Java 1. 4 版本<br>       2004 年发布Java 1. 5 版本<br>       2006 年发布Java 1. 6 版本</p></blockquote><pre><code>2009 年Oracle甲骨文公司收购Sun公司，并于 2011 发布Java 1. 7 版本2014 年发布Java 1. 8 版本2017 年发布Java 9. 0 版本</code></pre><h3 id="Java语言能做什么"><a href="#Java语言能做什么" class="headerlink" title="Java语言能做什么"></a>Java语言能做什么</h3><p>Java语言主要应用在互联网程序的开发领域。常见的互联网程序比如天猫、京东、物流系统、网银系统等，以及服务器后台处理大数据的存储、查询、数据挖掘等也有很多应用。</p><h2 id="1-2-计算机基础知识"><a href="#1-2-计算机基础知识" class="headerlink" title="1. 2 计算机基础知识"></a>1. 2 计算机基础知识</h2><h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><h5 id="计算机中的数据不同于人们生活中的数据，人们生活采用十进制数，而计算机中全部采用二进制数表示，它只包含"><a href="#计算机中的数据不同于人们生活中的数据，人们生活采用十进制数，而计算机中全部采用二进制数表示，它只包含" class="headerlink" title="计算机中的数据不同于人们生活中的数据，人们生活采用十进制数，而计算机中全部采用二进制数表示，它只包含"></a>计算机中的数据不同于人们生活中的数据，人们生活采用十进制数，而计算机中全部采用二进制数表示，它只包含</h5><p>0 、 1 两个数，逢二进一， 1 + 1 = 10 。每一个 0 或者每一个 1 ，叫做一个bit（比特）。</p><p>下面了解一下十进制和二进制数据之间的转换计算。</p><pre><code>十进制数据转成二进制数据：使用除以 2 获取余数的方式</code></pre><p><img src="%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6.png"></p><h5 id="二进制数据转成十进制数据：使用-8421-编码的方式"><a href="#二进制数据转成十进制数据：使用-8421-编码的方式" class="headerlink" title="二进制数据转成十进制数据：使用 8421 编码的方式"></a>二进制数据转成十进制数据：使用 8421 编码的方式</h5><p><img src="%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6.png"></p><blockquote><p>小贴士：</p><p>二进制数系统中，每个 0 或 1 就是一个位，叫做bit（比特）。</p></blockquote><h3 id="字节"><a href="#字节" class="headerlink" title="字节"></a>字节</h3><h5 id="字节是我们常见的计算机中最小存储单元。计算机存储任何的数据，都是以字节的形式存储，右键点击文件属性，我们可以查看文件的字节大小。"><a href="#字节是我们常见的计算机中最小存储单元。计算机存储任何的数据，都是以字节的形式存储，右键点击文件属性，我们可以查看文件的字节大小。" class="headerlink" title="字节是我们常见的计算机中最小存储单元。计算机存储任何的数据，都是以字节的形式存储，右键点击文件属性，我们可以查看文件的字节大小。"></a>字节是我们常见的计算机中最小存储单元。计算机存储任何的数据，都是以字节的形式存储，右键点击文件属性，我们可以查看文件的字节大小。</h5><p>8 个bit（二进制位） 0000 - 0000 表示为 1 个字节，写成 1 byte或者 1 B。</p><pre><code>8 bit = 1 B1024 B = 1 KB1024 KB = 1 MB1024 MB = 1 GB1024 GB = 1 TB</code></pre><h3 id="常用DOS命令"><a href="#常用DOS命令" class="headerlink" title="常用DOS命令"></a>常用DOS命令</h3><p>Java语言的初学者，学习一些DOS命令，会非常有帮助。DOS是一个早期的操作系统，现在已经被Windows系统取<br>代，对于我们开发人员，目前需要在DOS中完成一些事情，因此就需要掌握一些必要的命令。</p><ul><li>进入DOS操作窗口</li></ul><pre><code>按下Windows+R键盘，打开运行窗口，输入cmd回车，进入到DOS的操作窗口。</code></pre><pre><code>打开DOS命令行后，看到一个路径 c:\user 就表示我们现在操作的磁盘是c盘。</code></pre><ul><li>常用命令</li></ul><p>命令 操作符号</p><table><thead><tr><th align="center">盘符切换命令</th><th align="center">盘符名</th></tr></thead><tbody><tr><td align="center">查看当前文件夹</td><td align="center">dir</td></tr><tr><td align="center">进入文件夹命令</td><td align="center">cd 文件夹名</td></tr><tr><td align="center">退出文件夹命令</td><td align="center">cd..</td></tr><tr><td align="center">退出到磁盘根目录</td><td align="center">cd\</td></tr><tr><td align="center">清屏</td><td align="center">cls</td></tr></tbody></table><h1 id="第二章Java语言开发环境搭建"><a href="#第二章Java语言开发环境搭建" class="headerlink" title="第二章Java语言开发环境搭建"></a>第二章Java语言开发环境搭建</h1><h2 id="2-1个Java虚拟机——JVM"><a href="#2-1个Java虚拟机——JVM" class="headerlink" title="2. 1个Java虚拟机——JVM"></a>2. 1个Java虚拟机——JVM</h2><ul><li>JVM（Java Virtual Machine ）：Java虚拟机，简称JVM，是运行所有Java程序的假想计算机，是Java程序的运行环境，是Java 最具吸引力的特性之一。我们编写的Java代码，都运行在JVM 之上。</li><li>跨平台：任何软件的运行，都必须要运行在操作系统之上，而我们用Java编写的软件可以运行在任何的操作系统上，这个特性称为Java语言的跨平台特性。该特性是由JVM实现的，我们编写的程序运行在JVM上，而JVM运行在操作系统上。</li></ul><p><img src="JVM.png"></p><p>如上图所示，Java的虚拟机本身不具有跨平台功能的，每个操作系统下都有不同版本的虚拟机。</p><h2 id="2-2-JRE和JDK"><a href="#2-2-JRE和JDK" class="headerlink" title="2. 2 JRE和JDK"></a>2. 2 JRE和JDK</h2><ul><li>JRE (Java Runtime Environment) ：是Java程序的运行时环境，包含<code>JVM</code> 和运行时所需要的核心类库 。</li><li>JDK (Java Development Kit)：是Java程序开发工具包，包含<code>JRE</code> 和开发人员使用的工具。</li></ul><p>我们想要运行一个已有的Java程序，那么只需安装<code>JRE</code>即可。</p><p>我们想要开发一个全新的Java程序，那么必须安装<code>JDK</code>。</p><blockquote><p>小贴士：</p><p>​             三者关系：JDK&gt; JRE&gt; JVM</p></blockquote><h2 id="2-3-JDK-9安装图解"><a href="#2-3-JDK-9安装图解" class="headerlink" title="2. 3 JDK 9安装图解"></a>2. 3 JDK 9安装图解</h2><p><img src="jDK1.png"></p><p><img src="jDK2.png"></p><p><img src="jDK3.png"></p><p><img src="jDK4.png"></p><p><img src="jDK5.png"></p><blockquote><p>小贴士：</p><p>​         安装路径中，不要包含中文和空格</p></blockquote><h2 id="2-4-JAVA-HOME环境变量的配置"><a href="#2-4-JAVA-HOME环境变量的配置" class="headerlink" title="2. 4 JAVA_HOME环境变量的配置"></a>2. 4 JAVA_HOME环境变量的配置</h2><h3 id="配置环境变量作用"><a href="#配置环境变量作用" class="headerlink" title="配置环境变量作用"></a>配置环境变量作用</h3><p>开发Java程序，需要使用JDK中提供的工具，工具在JDK 9安装目录的<code>bin</code>目录下。</p><p><img src="%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png"></p><p>在DOS命令行下使用这些工具，就要先进入到JDK的bin目录下，这个过程就会非常的麻烦。</p><p><img src="bin.png"></p><p>不进入JDK的bin目录，这些工具就不能使用，会报错。</p><p><img src="bin1.png"></p><p> 为了开发方便，我们想在<strong>任意的目录下都可以使用JDK的开发工具</strong>，则必须要配置环境变量，配置环境变量的意义:<strong>在于告诉操作系统，我们使用的JDK开发工具在其中目录下。</strong></p><h3 id="配置环境变量步骤"><a href="#配置环境变量步骤" class="headerlink" title="配置环境变量步骤"></a>配置环境变量步骤</h3><h4 id="Windows-7、8版本"><a href="#Windows-7、8版本" class="headerlink" title="Windows 7、8版本"></a>Windows 7、8版本</h4><ol><li><p>计算机鼠标右键，选择属性</p></li><li><p>选择高级系统设置</p></li><li><p>高级选项卡，点击环境变量</p></li><li><p>点击新建，创建新的环境变量</p></li><li><p>变量名输入<code>JAVA_HOME</code>，变量值输入JDK 9的安装目录c：\ Java 9 \ jdk- 9. 0. 1</p></li><li><p>进入路径环境变量，双击或者单击编辑</p></li><li><p>在变量值的最前面，键入<code>％JAVA_HOME％\ bin;</code> 分号必须要写，必须是英文格式。 </p></li><li><p>环境变量配置完成，重新打开DOS命令行，在任意目录下输入javac命令，运行成功。</p></li></ol><h4 id="Windows-10版本"><a href="#Windows-10版本" class="headerlink" title="Windows 10版本"></a>Windows 10版本</h4><ol><li>文件资源管理器–&gt;此电脑鼠标右键–&gt;选择属性</li><li>选择高级系统设置–&gt;选择环境变量</li><li>单击下面的系统变量的新建，创建新的环境变量，变量名输入<code>JAVA_HOME</code>，变量值输入JDK 9的安装目录</li></ol><pre><code>D:\ 02 _DevelopTools\Java\jdk-^9.^0.^1</code></pre><ol start="4"><li>进入路径环境变量，双击或者单击编辑</li><li>单击新建，键入<code>％JAVA_HOME％\ bin</code>，必须是英文格式。选择该行，上移到最上方，单击确定。</li><li>环境变量配置完成，重新打开DOS命令行，在任意目录下输入javac命令。</li></ol><p><img src="javac%E5%91%BD%E4%BB%A4.png"></p><h1 id="第三章-HelloWorld入门程序"><a href="#第三章-HelloWorld入门程序" class="headerlink" title="第三章 HelloWorld入门程序"></a>第三章 HelloWorld入门程序</h1><h2 id="3-1程序开发步骤说明"><a href="#3-1程序开发步骤说明" class="headerlink" title="3. 1程序开发步骤说明"></a>3. 1程序开发步骤说明</h2><p>开发环境已经搭建完毕，可以开发我们第一个Java程序了。</p><p>Java程序开发三步骤：编写，编译，运行。</p><p><img src="java%E8%BF%90%E8%A1%8C.png"></p><h2 id="3-2编写Java源程序"><a href="#3-2编写Java源程序" class="headerlink" title="3. 2编写Java源程序"></a>3. 2编写Java源程序</h2><ol><li><p>在d:\day 01 目录下新建文本文件，完整的文件名修改为HelloWorld.java，其中文件名为HelloWorld，后<br> 缀名必须为.java^ 。</p></li><li><p> 用记事本打开</p></li></ol><blockquote><p>使用notepad++记事本软件。</p></blockquote><ol start="3"><li> 在文件中键入文本并保存，代码如下：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>文件名必须是HelloWorld ，保证文件名和类的名字是一致的，注意大小写。<br>每个字母和符号必须与示例代码一模一样。</p></blockquote><p>第一个HELLOWORD源程序就编写完成了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我们必须将关系编写好的Java的源文件编译成JVM可以看懂的字节码文件。</p><h2 id="3-3编译Java源文件"><a href="#3-3编译Java源文件" class="headerlink" title="3. 3编译Java源文件"></a>3. 3编译Java源文件</h2><p>在DOS命令行中，进入Java源文件的目录，使用<code>javac</code>命令进行编译。</p><p>命令：</p><p><code>javac Java源文件名.后缀名</code></p><p>举例：</p><p><code>javac HelloWorld.java</code></p><p>打开：\ day 01目录，发现产生了一个新的文件HelloWorld.class，该文件<br>就是编译后的文件，是Java的可运行文件，称为字节码文件，有了字节码文件，就可以运行程序了。</p><blockquote><p>Java源文件的编译工具javac.exe，在JDK安装目录的bin目录下。但是由于配置了环境变量，可以再任意目录下使用。</p></blockquote><h2 id="3-4运行Java程序"><a href="#3-4运行Java程序" class="headerlink" title="3. 4运行Java程序"></a>3. 4运行Java程序</h2><p>在DOS命令行中，进入Java源文件的目录，使用<code>java</code>命令进行运行。</p><p>命令：</p><p><code>java 类名字</code></p><p>举例: </p><p><code>java HelloWorld</code></p><blockquote><p>java HelloWord 不要写 不要写 不要写 .class</p></blockquote><p><img src="%E8%BF%90%E8%A1%8CJava%E7%A8%8B%E5%BA%8F.png"></p><blockquote><p>Java程序.class文件 的运行工具java.exe ，在JDK安装目录的bin目录下。但是由于配置了环境变量，可以再任意目录下使用。</p></blockquote><h2 id="3-5入门程序说明"><a href="#3-5入门程序说明" class="headerlink" title="3. 5入门程序说明"></a>3. 5入门程序说明</h2><h3 id="编译和运行是两回事"><a href="#编译和运行是两回事" class="headerlink" title="编译和运行是两回事"></a>编译和运行是两回事</h3><ul><li>编译：是指将我们编写的Java源文件翻译成JVM认识的class文件，在这个过程中，<code>javac</code> 编译器会检查我们所写的程序是否有错误，有错误就会提示出来，如果没有错误就会编译成功。</li><li>运行：是指将<code>class文件</code> 交给JVM去运行，此时JVM就会去执行我们编写的程序了。</li></ul><h3 id="关于主要方法"><a href="#关于主要方法" class="headerlink" title="关于主要方法"></a>关于主要方法</h3><ul><li>main方法：称为主方法。写法是固定格式不可以更改。main方法是程序的入口点或起始点，无论我们编写多少程序，JVM在运行的时候，都会从main方法这里开始执行。</li></ul><h2 id="3-6添加注释"><a href="#3-6添加注释" class="headerlink" title="3. 6添加注释"></a>3. 6添加注释</h2><ul><li><strong>注释</strong>：就是对代码的解释和说明。其目的是让人们能够更加轻松地了解代码。为代码添加注释，是十分必须要的，它不影响程序的编译和运行。</li><li>Java中有单行注释和多行注释<ul><li>单行注释以 <code>//开头  换行结束</code></li><li>多行注释以 <code>/\*开头  以*/结束</code></li></ul></li></ul><h2 id="3-7关键字关键词"><a href="#3-7关键字关键词" class="headerlink" title="3. 7关键字关键词"></a>3. 7关键字关键词</h2><ul><li><strong>关键字：</strong>是指在程序中，Java已经定义好的单词，具有特殊含义。<ul><li>HelloWorld案例中，出现的关键字有 <code>public</code> 、<code>class</code> 、 <code>static</code> 、 <code>void</code> 等，这些单词已经被Java定义好，全部都是小写字母，notepad++中颜色特殊。</li><li>关键字比较多，不能死记硬背，学到哪里记到哪里即可。</li></ul></li></ul><h2 id="3-8标识符"><a href="#3-8标识符" class="headerlink" title="3. 8标识符"></a>3. 8标识符</h2><ul><li><strong>标识符</strong>：是指在程序中，我们自己定义的内容。某些类的名字，方法的名字和变量的名字等等，都是标识符。<ul><li>HelloWorld案例中，出现的标识符有类名字<code>HelloWorld</code> 。</li></ul></li></ul><pre><code>字符常量 单引号引起来,只能写一个字符,必须有内容 'a' ， ' '， '好'字符串常量 双引号引起来,可以写多个字符,也可以不写 "A" ，"Hello" ，"你好" ，""布尔常量 只有两个值（流程控制中讲解） true ， false空常量 只有一个值（引用数据类型中讲解） null</code></pre><ul><li><p><strong>命名规则</strong>：**<code>硬性要求</code>**</p><ul><li>标识符可以包含<code>英文字母26个（区分大小写）</code>，<code>0-9数字</code>，<code>$（美元符号）</code>和<code>_（下划线）</code>。</li><li>标识符不能以数字开头。</li><li>标识符不能是关键字。</li></ul></li><li><p><strong>命名规范</strong>：**<code>软性建议</code>**</p><ul><li>类名规范：首字母大写，后面每个单词首字母大写（大驼峰式）。</li><li>方法名规范：首字母小写，后面每个单词首字母大写（小驼峰式）。</li><li>变量名规范：全部小写。</li></ul></li></ul><h1 id="第四章常量"><a href="#第四章常量" class="headerlink" title="第四章常量"></a>第四章常量</h1><h2 id="4-1概述"><a href="#4-1概述" class="headerlink" title="4. 1概述"></a>4. 1概述</h2><p>常量：是指在Java程序中固定不变的数据。</p><h2 id="4-2分类"><a href="#4-2分类" class="headerlink" title="4. 2分类"></a>4. 2分类</h2><table><thead><tr><th align="center">类型</th><th align="center">含义</th><th align="center">数据抽取</th></tr></thead><tbody><tr><td align="center">整体常量</td><td align="center">所有的整体</td><td align="center">0，1，567，-9</td></tr><tr><td align="center">小数常量</td><td align="center">所有的小数</td><td align="center">0. 0，-0. 1，2. 55</td></tr><tr><td align="center">字符常量</td><td align="center">单引号引起来,只能写一个字符,必须有内容</td><td align="center">‘a’, ‘ ’, ‘好’</td></tr><tr><td align="center">字符串常量</td><td align="center">双引号引起来,可以写多个字符,也可以不写</td><td align="center">“A”,“Hello”，“”</td></tr><tr><td align="center">布尔常量</td><td align="center">只有两个值</td><td align="center">true，false</td></tr><tr><td align="center">空常量</td><td align="center">只有一个值</td><td align="center">null</td></tr></tbody></table><h2 id="4-3练习"><a href="#4-3练习" class="headerlink" title="4. 3练习"></a>4. 3练习</h2><h5 id="需求：输出各种类型的常量。"><a href="#需求：输出各种类型的常量。" class="headerlink" title="需求：输出各种类型的常量。"></a>需求：输出各种类型的常量。</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstantDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//输出整数常量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token number">123</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出小数常量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">.</span> <span class="token number">125</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出字符常量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出布尔常量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出字符串常量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="第五章变量和数据类型"><a href="#第五章变量和数据类型" class="headerlink" title="第五章变量和数据类型"></a>第五章变量和数据类型</h1><h2 id="5-1变量概述"><a href="#5-1变量概述" class="headerlink" title="5. 1变量概述"></a>5. 1变量概述</h2><ul><li><p><strong>变量：常量是固定不变的数据，那么在程序中可以变化的量称为变量</strong>。</p><blockquote><p>数学中，可以使用字母代替数字运算,例如 x= 1 + 5 或者 6 =x+ 5 。</p><p>程序中，可以使用字母保存数字的方式进行运算，提高计算能力，可以解决更多的问题。比如x保存 5 ，x也可以保存 6 ，这样x保存的数据是可以改变的，也就是我们所讲解的变量。</p></blockquote></li></ul><p>Java中要求一个变量每次只能保存一个数据，必须要明确保存的数据类型。</p><h2 id="5-2数据类型"><a href="#5-2数据类型" class="headerlink" title="5. 2数据类型"></a>5. 2数据类型</h2><h2 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a>数据类型分类</h2><p>Java的数据类型分为两大类：</p><ul><li>基本数据类型：包括 整数、浮点数、字符、布尔。</li><li>引用数据类型：包括 类、数组、接口。</li></ul><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>四类八种基本数据类型：</p><table><thead><tr><th align="center">数据类型</th><th align="center">关键字</th><th align="center">内存占用</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">字节型</td><td align="center">byte</td><td align="center">1 个字节</td><td align="center">128 ~ 127</td></tr><tr><td align="center">短整型</td><td align="center">short</td><td align="center">2 个字节</td><td align="center">- 32768 ~ 32767</td></tr><tr><td align="center">整型</td><td align="center">int（默认）</td><td align="center">4 个字节</td><td align="center">- 2的31 次方~ 2 的 31 次方- 1</td></tr><tr><td align="center">长整型</td><td align="center">long</td><td align="center">8 个字节</td><td align="center">- 2 的 63 次方~ 2 的 63 次方- 1</td></tr><tr><td align="center">单精度浮点数</td><td align="center">float</td><td align="center">4 个字节</td><td align="center">1. 4013 E- 45 ~ 3. 4028 E+ 38</td></tr><tr><td align="center">双精度浮点数</td><td align="center">double（默认）</td><td align="center">8 个字节</td><td align="center">4. 9 E- 324 ~ 1. 7977 E+ 308</td></tr><tr><td align="center">字符型</td><td align="center">char</td><td align="center">2 个字节</td><td align="center">0 - 65535</td></tr><tr><td align="center">布尔类型</td><td align="center">boolean</td><td align="center">1 个字节</td><td align="center">true，false</td></tr></tbody></table><blockquote><ol><li>字符串不是基本类型，而是引用类型。</li><li>浮点型可能只是一个近似值，并非精确的值。</li><li>数据范围与字节数不一定相关，例如float数据范围比long更加广泛，但是float是4字节，long是8字节。</li><li>浮点数当中默认类型是double。如果一定要使用float类型，需要加上一个后缀F。<br>如果是整数，默认为int类型，如果一定要使用long类型，需要加上一个后缀L。推荐使用大写字母后缀。</li></ol></blockquote><h2 id="5-3变量的定义"><a href="#5-3变量的定义" class="headerlink" title="5. 3变量的定义"></a>5. 3变量的定义</h2><p> 变量定义的格式包括三个要素：<code>数据类型</code>，<code>变量名</code>，<code>数据值</code>。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p><code>数据类型 变量名 = 数据值</code></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>定义所有基本数据类型的变量，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Variable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义字节型变量</span>        <span class="token keyword">byte</span> b <span class="token operator">=</span>  <span class="token number">100</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义短整型变量</span>        <span class="token keyword">short</span> s <span class="token operator">=</span>  <span class="token number">1000</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义整型变量</span>        <span class="token keyword">int</span> i <span class="token operator">=</span>  <span class="token number">123456</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义长整型变量</span>        <span class="token keyword">long</span> l <span class="token operator">=</span>  <span class="token number">12345678900</span> L<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义单精度浮点型变量</span>        <span class="token keyword">float</span> f <span class="token operator">=</span>  <span class="token number">5</span><span class="token punctuation">.</span> <span class="token number">5</span> F<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义双精度浮点型变量</span>        <span class="token keyword">double</span> d <span class="token operator">=</span>  <span class="token number">8</span><span class="token punctuation">.</span> <span class="token number">5</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义布尔型变量</span>        <span class="token keyword">boolean</span> bool <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义字符型变量</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>long类型：建议数据后加L表示。<br>   float类型：建议数据后加F表示。</p></blockquote><h2 id="5-4注意"><a href="#5-4注意" class="headerlink" title="5. 4注意"></a>5. 4注意</h2><ul><li><p>变量名称：在同一个大括号范围内，变量的名字不可以相同。</p></li><li><p>变量赋值：定义的变量，不赋值不能使用。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda 配置国内下载镜像</title>
      <link href="post/1b524221/"/>
      <url>post/1b524221/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Anaconda-配置国内下载镜像"><a href="#Anaconda-配置国内下载镜像" class="headerlink" title="Anaconda 配置国内下载镜像"></a>Anaconda 配置国内下载镜像</h2><ul><li><p>查看下载镜像</p><blockquote><p>conda config –show channels</p></blockquote></li><li><p>添加下载镜像</p><blockquote><p>conda config –add channels <a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a></p><p>conda config –add channels <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></p><p>conda config –add channels <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></p><p>conda config –add channels <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a></p></blockquote><p>1 阿里云， 2 中国科技大学，3 豆瓣，4清华大学，</p></li><li><p>删除下载镜像</p><blockquote><p>conda config –remove channels <a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a></p></blockquote></li></ul><h2 id="Anaconda基本操作"><a href="#Anaconda基本操作" class="headerlink" title="Anaconda基本操作"></a>Anaconda基本操作</h2><ul><li><p>查看虚拟环境</p><blockquote><p>C:\Users\chaom&gt;conda env list</p><p>base                     *  E:\ProgramData\Anaconda3    (星号表示当前激活的环境)<br>Wu_dep                   E:\ProgramData\Anaconda3\envs\Wu_dep</p></blockquote></li><li><p>创建虚拟环境</p><blockquote><p>conda create -n your_env_name python=3.8</p></blockquote></li><li><p>导出环境</p><blockquote><p>conda env export &gt; environment.yaml</p></blockquote></li><li><p>拷贝环境</p><blockquote><p>conda env create -f environment.yaml</p></blockquote></li><li><p>激活环境</p><blockquote><p>activate your_env_name</p></blockquote></li><li><p>删除环境及其下属安装包</p><blockquote><p>conda remove -n your_env_name –all</p></blockquote></li><li><p>查看当前环境下的安装的python扩展库</p><blockquote><p>conda list</p></blockquote></li><li><p>安装python扩展库</p><blockquote><p>conda install numpy</p><p>pip install numpy</p></blockquote></li><li><p>卸载python扩展库</p><blockquote><p>conda remove numpy</p><p>pip uninstall numpy</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取Class对象的三种方式</title>
      <link href="post/da2b7869/"/>
      <url>post/da2b7869/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="获取Class对象的三种方式"><a href="#获取Class对象的三种方式" class="headerlink" title="获取Class对象的三种方式"></a>获取Class对象的三种方式</h1><ol><li>Object ——&gt; getClass() 通过对象.getclass</li><li>任何数据类型（包括基本数据类型）都有一个“静态”的class属性 通过类名.class</li><li>通过Class类的静态方法：forName（String className）(常用) 通过对象.forname</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fanshe</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//第一种方式获取Class对象    </span>         Student stu1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这一new 产生一个Student对象，一个Class对象。</span>         Class <span class="token class-name">stuClass</span><span class="token operator">=</span>stu1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取Class对象           System.out.println(stuClass.getName());</span>         <span class="token comment" spellcheck="true">//第二种方式获取Class对象  </span>         Class <span class="token class-name">stuClass2</span><span class="token operator">=</span>Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stuClass <span class="token operator">==</span> stuClass2<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//第三种方式获取Class对象  </span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class <span class="token class-name">stuClass3</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"lianxiApril18.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意此字符串必须是真实路径，就是带包名的类路径，包名.类名 </span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stuClass3 <span class="token operator">==</span> stuClass2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断三种方式是否获取的是同一个</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block            e.printStackTrace();</span>        <span class="token punctuation">}</span>               <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射机制</title>
      <link href="post/fan-she-ji-zhi/"/>
      <url>post/fan-she-ji-zhi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>反射：框架设计的灵魂</p><h1 id="一、反射"><a href="#一、反射" class="headerlink" title="一、反射"></a>一、反射</h1><h2 id="1-1-框架"><a href="#1-1-框架" class="headerlink" title="1.1 框架"></a>1.1 框架</h2><p>半成品软件。可以在框架的基础上进行软件开发，简化编码。学习框架并不需要了解反射，但是要是想自己写一个框架，那么就要对反射机制有很深入的了解。</p><h2 id="1-2-反射"><a href="#1-2-反射" class="headerlink" title="1.2 反射"></a>1.2 反射</h2><p>反射机制：将类的各个组成部分封装为其他对象，这就是反射机制。</p><p>反射的好处：<br>1.可以在程序运行过程中，操作这些对象。<br>2.可以解耦，提高程序的可扩展性。</p><p>Java代码在计算机中经历的三个阶段<br>（1）Source源代码阶段：*.java被编译成*.class字节码文件。<br>（2）Class类对象阶段：*.class字节码文件被类加载器加载进内存，并将其封装成Class对象（用于在内存中描述字节码文件），Class对象将原字节码文件中的成员变量抽取出来封装成数组Field[],将原字节码文件中的构造函数抽取出来封装成数组Construction[]，在将成员方法封装成Method[]。当然Class类内不止这三个，还封装了很多，我们常用的就这三个。<br>（3）RunTime运行时阶段：创建对象的过程new。<br><img src="https://note.youdao.com/yws/public/resource/128508bf6a04968eced81ede9ac1b304/xmlnote/1DE7C44C1DFF4E92AA54BDB012FB446A/10629"></p><h1 id="二、获取Class对象的方式"><a href="#二、获取Class对象的方式" class="headerlink" title="二、获取Class对象的方式"></a>二、获取Class对象的方式</h1><h2 id="2-1-获取Class对象的三种方式对应着java代码在计算机中的三个阶段"><a href="#2-1-获取Class对象的三种方式对应着java代码在计算机中的三个阶段" class="headerlink" title="2.1 获取Class对象的三种方式对应着java代码在计算机中的三个阶段"></a>2.1 获取Class对象的三种方式对应着java代码在计算机中的三个阶段</h2><p>（1）【Source源代码阶段】 Class.forName(“全类名”)：将字节码文件加载进内存，返回Class对象<br>        * 多用于配置文件，将类名定义在配置文件中。读取文件，加载类。<br>（2）【Class类对象阶段】 类名.class：通过类名的属性class获取<br>        * 多用于参数的传递<br>（3）【Runtime运行时阶段】对象.getClass()：getClass()方法是定义在Objec类中的方法<br>        * 多用于对象的获取字节码的方式<br>   结论：同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，无论通过哪一种方式获取的Class对象都是同一个。</p><h2 id="2-2-测试三种获取方法"><a href="#2-2-测试三种获取方法" class="headerlink" title="2.2 测试三种获取方法"></a>2.2 测试三种获取方法</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reflect1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//方式一：Class.forName("全类名");</span>    Class <span class="token class-name">cls1</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.test.domain.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Person自定义实体类</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cls1 = "</span> <span class="token operator">+</span> cls1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//方式二：类名.class</span>    Class <span class="token class-name">cls2</span> <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cls2 = "</span> <span class="token operator">+</span> cls2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//方式三：对象.getClass();</span>    Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class <span class="token class-name">cls3</span> <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cls3 = "</span> <span class="token operator">+</span> cls3<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// == 比较三个对象</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cls1 == cls2 : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>cls1 <span class="token operator">==</span> cls2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cls1 == cls3 : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>cls1 <span class="token operator">==</span> cls3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//true</span>    <span class="token comment" spellcheck="true">//结论：同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，无论通过哪一种方式获取的Class对象都是同一个。</span><span class="token punctuation">}</span></code></pre><p><img src="https://note.youdao.com/yws/public/resource/128508bf6a04968eced81ede9ac1b304/xmlnote/07CBA267A57D42A0BBCEADFAD96CFFF4/10644"></p><h1 id="三、-Class对象功能"><a href="#三、-Class对象功能" class="headerlink" title="三、 Class对象功能"></a>三、 Class对象功能</h1><h2 id="3-1-获取功能"><a href="#3-1-获取功能" class="headerlink" title="3.1 获取功能"></a>3.1 获取功能</h2><p>这里只写了一些常用的，具体可以参看jdk的帮助文档。<br>（1）获取成员变量们</p><pre><code>Field[] getFields() ：获取所有public修饰的成员变量Field getField(String name) ：  获取指定名称的 public修饰的成员变量Field[] getDeclaredFields()  获取所有的成员变量，不考虑修饰符Field getDeclaredField(String name) </code></pre><p>（2）获取构造方法们</p><pre class=" language-java"><code class="language-java">Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  Constructor<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getConstructor</span><span class="token punctuation">(</span>类<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>  Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  Constructor<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>类<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>  </code></pre><p>（3）获取成员方法们：</p><pre class=" language-java"><code class="language-java">Method<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  Method <span class="token function">getMethod</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> 类<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>   Method<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  Method <span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> 类<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span></code></pre><p>（4）获取全类名   </p><pre><code>String getName() </code></pre><h2 id="3-2-Field：成员变量"><a href="#3-2-Field：成员变量" class="headerlink" title="3.2 Field：成员变量"></a>3.2 Field：成员变量</h2><p>（1）设置值  void set(Object obj, Object value)<br>（2）获取值  get(Object obj)<br>（3）忽略访问权限修饰符的安全检查 setAccessible(true):暴力反射</p><h3 id="3-2-1-测试的实体类"><a href="#3-2-1-测试的实体类" class="headerlink" title="3.2.1 测试的实体类"></a>3.2.1 测试的实体类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>domain<span class="token punctuation">;</span> <span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Setter<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>ToString<span class="token punctuation">;</span> <span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> String a<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//最大范围public</span>    <span class="token keyword">protected</span> String b<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//受保护类型</span>    String c<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//默认的访问权限</span>    <span class="token keyword">private</span> String d<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//私有类型</span> <span class="token punctuation">}</span></code></pre><h3 id="3-2-2-测试getFields和getField-String-name-方法"><a href="#3-2-2-测试getFields和getField-String-name-方法" class="headerlink" title="3.2.2 测试getFields和getField(String name)方法"></a>3.2.2 测试getFields和getField(String name)方法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 1. 获取成员变量们 *     * Field[] getFields() *     * Field getField(String name) * @throws Exception */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reflect2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//0、获取Person的Class对象</span>    Class <span class="token class-name">personClass</span> <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//1、Field[] getFields()获取所有public修饰的成员变量</span>    Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.Field getField(String name)</span>    Field a <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//获取成员变量a 的值 [也只能获取公有的，获取私有的或者不存在的字符会抛出异常]</span>    Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object value <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value = "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//设置属性a的值</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://note.youdao.com/yws/public/resource/128508bf6a04968eced81ede9ac1b304/xmlnote/F3730AB073574E45822C079AE0ADCF84/10672"></p><h3 id="3-2-3-测试getDeclaredFields和getDeclaredField-String-name-方法"><a href="#3-2-3-测试getDeclaredFields和getDeclaredField-String-name-方法" class="headerlink" title="3.2.3 测试getDeclaredFields和getDeclaredField(String name)方法"></a>3.2.3 测试getDeclaredFields和getDeclaredField(String name)方法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *     Field[] getDeclaredFields() *     Field getDeclaredField(String name) * @throws Exception */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reflect3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    Class <span class="token class-name">personClass</span> <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//Field[] getDeclaredFields()：获取所有的成员变量，不考虑修饰符</span>    Field<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Field filed <span class="token operator">:</span> declaredFields<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>filed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Field getDeclaredField(String name)</span>    Field d <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//private String d;</span>    Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//Object value1 = d.get(p);    //会抛出异常</span>    <span class="token comment" spellcheck="true">//System.out.println("value1 = " + value1);    //对于私有变量虽然能会获取到，但不能直接set和get</span>     <span class="token comment" spellcheck="true">//忽略访问权限修饰符的安全检查</span>    d<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//暴力反射</span>    Object value2 <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value2 = "</span> <span class="token operator">+</span> value2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>正常运行结果<br><img src="https://note.youdao.com/yws/public/resource/128508bf6a04968eced81ede9ac1b304/xmlnote/32E0AD1A07F4403292433B920C80AADD/10699"><br>没有忽略访问修饰符直接访问抛出的异常</p><p> <img src="https://note.youdao.com/yws/public/resource/128508bf6a04968eced81ede9ac1b304/xmlnote/9EF069205DC84D78964025C84FDDC957/10709"></p><h2 id="3-3-Constructor-构造方法"><a href="#3-3-Constructor-构造方法" class="headerlink" title="3.3 Constructor:构造方法"></a>3.3 Constructor:构造方法</h2><p>创建对象：T newInstance(Object… initargs)<br>注意：如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法</p><h3 id="3-3-1-修改测试的实体类"><a href="#3-3-1-修改测试的实体类" class="headerlink" title="3.3.1 修改测试的实体类"></a>3.3.1 修改测试的实体类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>domain<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Setter<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>ToString<span class="token punctuation">;</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//无参构造函数</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//单个参数的构造函数，且为私有构造方法</span>    <span class="token keyword">private</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//有参构造函数</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-3-2-测试方法（注释很重要）"><a href="#3-3-2-测试方法（注释很重要）" class="headerlink" title="3.3.2 测试方法（注释很重要）"></a>3.3.2 测试方法（注释很重要）</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 2. 获取构造方法们 *    Constructor&lt;?>[] getConstructors() *    Constructor&lt;T> getConstructor(类&lt;?>... parameterTypes) */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reflect4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    Class <span class="token class-name">personClass</span> <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//Constructor&lt;?>[] getConstructors()</span>    Constructor<span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Constructor constructor <span class="token operator">:</span> constructors<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//Constructor 对象reflect包下的 import java.lang.reflect.Constructor;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//获取无参构造函数   注意：Person类中必须要有无参的构造函数，不然抛出异常</span>    Constructor constructor1 <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"constructor1 = "</span> <span class="token operator">+</span> constructor1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取到构造函数后可以用于创建对象</span>    Object person1 <span class="token operator">=</span> constructor1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Constructor类内提供了初始化方法newInstance();方法</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"person1 = "</span> <span class="token operator">+</span> person1<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//获取有参的构造函数  //public Person(String name, Integer age) 参数类型顺序要与构造函数内一致，且参数类型为字节码类型</span>    Constructor constructor2 <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"constructor2 = "</span> <span class="token operator">+</span> constructor2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建对象</span>    Object person2 <span class="token operator">=</span> constructor2<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//获取的是有参的构造方法，就必须要给参数</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//对于一般的无参构造函数，我们都不会先获取无参构造器之后在进行初始化。而是直接调用Class类内的newInstance()方法</span>    Object person3 <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"person3 = "</span> <span class="token operator">+</span> person3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//我们之前使用的 Class.forName("").newInstance; 其本质上就是调用了类内的无参构造函数来完成实例化的</span>    <span class="token comment" spellcheck="true">//故可以得出结论 我们以后在使用  Class.forName("").newInstance; 反射创建对象时，一定要保证类内有无参构造函数</span><span class="token punctuation">}</span></code></pre><p><img src="https://note.youdao.com/yws/public/resource/128508bf6a04968eced81ede9ac1b304/xmlnote/50E4D8BF6F284C39BB6551B70E35CE66/10729"></p><h3 id="3-3-3-对于getDeclaredConstructor方法和getDeclaredConstructors方法"><a href="#3-3-3-对于getDeclaredConstructor方法和getDeclaredConstructors方法" class="headerlink" title="3.3.3 对于getDeclaredConstructor方法和getDeclaredConstructors方法"></a>3.3.3 对于getDeclaredConstructor方法和getDeclaredConstructors方法</h3><p>对于多出个Declared关键词的两个方法，与不带这个词的两个方法的对比。与之前3.2叙述的一样，getDeclaredConstructor方法可以获取到任何访问权限的构造器，而getConstructor方法只能获取public修饰的构造器。具体不再测试。此外在构造器的对象内也有setAccessible(true);方法，并设置成true就可以操作了。<br>关于为什么要使用private访问权限的构造器，使用这个构造器不就不能外部访问了嘛，不也就无法进行实例化对象了吗？无法在类的外部实例化对象正是私有构造器的意义所在，在单例模式下经常使用，整个项目只有一个对象，外部无法实例化对象，可以在类内的进行实例化并通过静态方法返回（由于实例化的对象是静态的，故只有一个对象，也就是单例的）。网上说这就是单例模式中的饿汉模式，不管是否调用，都创建一个对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SingletonDemo</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//私有化构造方法</span>        <span class="token keyword">private</span> <span class="token function">SingletonDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token punctuation">}</span>             <span class="token comment" spellcheck="true">//创建一个对象  类内实例化（静态的对象）</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> SingletonDemo singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//提供public方法供外部访问，返回这个创建的对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonDemo <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SingletonDemo s1 <span class="token operator">=</span> SingletonDemo<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出对象的地址，如果有地址存在，则说明对象创建成功并获取到</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>          SingletonDemo s2 <span class="token operator">=</span> SingletonDemo<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果结果为true，则说明是同一个对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出结果为true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-4-Method：方法对象"><a href="#3-4-Method：方法对象" class="headerlink" title="3.4 Method：方法对象"></a>3.4 Method：方法对象</h2><p>执行方法：</p><pre><code>Object invoke(Object obj, Object... args)  </code></pre><p>获取方法名称：</p><pre><code>String getName();</code></pre><h3 id="3-4-1-修改测试的实体类"><a href="#3-4-1-修改测试的实体类" class="headerlink" title="3.4.1 修改测试的实体类"></a>3.4.1 修改测试的实体类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>domain<span class="token punctuation">;</span> <span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Setter<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>ToString<span class="token punctuation">;</span> <span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//无参构造函数</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//有参构造函数</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//无参方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eat..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//重载有参方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>String food<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eat..."</span><span class="token operator">+</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-2-测试invoke方法"><a href="#3-4-2-测试invoke方法" class="headerlink" title="3.4.2 测试invoke方法"></a>3.4.2 测试invoke方法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 3. 获取成员方法们： *    * Method[] getMethods() *    * Method getMethod(String name, 类&lt;?>... parameterTypes) */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reflect5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    Class <span class="token class-name">personClass</span> <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//获取指定名称的方法    </span>    Method eat_method1 <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//执行方法</span>    Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object rtValue <span class="token operator">=</span> eat_method1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果方法有返回值类型可以获取到，没有就为null</span>    <span class="token comment" spellcheck="true">//输出返回值 eat方法没有返回值，故输出null</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rtValue = "</span> <span class="token operator">+</span> rtValue<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//获取有参的构造函数  有两个参数 第一个方法名 第二个参数列表 ，不同的参数是不同的方法（重载）</span>    Method eat_method2 <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"eat"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//执行方法</span>    eat_method2<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">"饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============================================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//获取方法列表</span>    Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//注意：获取到的方法名称不仅仅是我们在Person类内看到的方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//继承下来的方法也会被获取到（当然前提是public修饰的）</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-3-测试getName方法"><a href="#3-4-3-测试getName方法" class="headerlink" title="3.4.3 测试getName方法"></a>3.4.3 测试getName方法</h3><p>getName()方法获取的方法名仅仅就是方法名（不带全类名），且不带有参数列表。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reflect6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException <span class="token punctuation">{</span>    Class <span class="token class-name">personClass</span> <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取方法名</span>        String name <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://note.youdao.com/yws/public/resource/128508bf6a04968eced81ede9ac1b304/xmlnote/5DD1C94F03F242599DFF9E65B544FEB1/10808"></p><h3 id="3-4-4-关于获取成员方法们的另外两个方法"><a href="#3-4-4-关于获取成员方法们的另外两个方法" class="headerlink" title="3.4.4 关于获取成员方法们的另外两个方法"></a>3.4.4 关于获取成员方法们的另外两个方法</h3><pre><code>Method[] getDeclaredMethods()  Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)method.setAccessible(true);   //暴力反射</code></pre><p>同之前的叙述一样，带有Declared关键字的方法这两个方法，可以获取到任意修饰符的方法。同样的提供了setAccessible(true);方法进行暴力反射。</p><p>综上说述：对于反射机制来说，在反射面前没有公有私有，都可以通过暴力反射解决。</p><h2 id="3-5-获取类名"><a href="#3-5-获取类名" class="headerlink" title="3.5 获取类名"></a>3.5 获取类名</h2><p>getClass()方法是Object类的方法，需要注意一点获取的类名是全类名（带有路径）</p><pre><code>@Testpublic void reflect7(){    Class personClass = Person.class;    String className = personClass.getName();    System.out.println(className);}</code></pre><p><img src="https://note.youdao.com/yws/public/resource/128508bf6a04968eced81ede9ac1b304/xmlnote/F2D85080811D4ABEB6A10D8B6631D03A/10843"></p><h1 id="四、案例"><a href="#四、案例" class="headerlink" title="四、案例"></a>四、案例</h1><h2 id="4-1-案例分析"><a href="#4-1-案例分析" class="headerlink" title="4.1 案例分析"></a>4.1 案例分析</h2><h3 id="4-1-1-需求"><a href="#4-1-1-需求" class="headerlink" title="4.1.1 需求"></a>4.1.1 需求</h3><p>写一个”框架”，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法。</p><h3 id="4-1-2-实现"><a href="#4-1-2-实现" class="headerlink" title="4.1.2 实现"></a>4.1.2 实现</h3><p>（1）配置文件<br>（2）反射</p><h3 id="4-1-3-步骤"><a href="#4-1-3-步骤" class="headerlink" title="4.1.3 步骤"></a>4.1.3 步骤</h3><p>（1）将需要创建的对象的全类名和需要执行的方法定义在配置文件中<br>（2）在程序中加载读取配置文件<br>（3）使用反射技术来加载类文件进内存<br>（4）创建对象<br>（5）执行方法</p><h2 id="4-2-代码实现"><a href="#4-2-代码实现" class="headerlink" title="4.2 代码实现"></a>4.2 代码实现</h2><h3 id="4-2-1-需要的实体类"><a href="#4-2-1-需要的实体类" class="headerlink" title="4.2.1 需要的实体类"></a>4.2.1 需要的实体类</h3><p>（1）Person类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>domain<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//无参方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eat..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（2）Student类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>domain<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student's job is to learn..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-2-2-编写配置文件"><a href="#4-2-2-编写配置文件" class="headerlink" title="4.2.2 编写配置文件"></a>4.2.2 编写配置文件</h3><p>以后我们在配置文件内看见全类名，就应该想到可能使用到了反射</p><pre><code>className = com.test.domain.PersonmethodName = eat</code></pre><h3 id="4-2-3-编写测试方法（模拟框架）"><a href="#4-2-3-编写测试方法（模拟框架）" class="headerlink" title="4.2.3 编写测试方法（模拟框架）"></a>4.2.3 编写测试方法（模拟框架）</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>junit<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectTest</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">/**         * 前提：不能改变该类的任何代码。可以创建任意类的对象，可以执行任意方法         * 即：拒绝硬编码         */</span>         <span class="token comment" spellcheck="true">//1.加载配置文件</span>        <span class="token comment" spellcheck="true">//1.1创建Properties对象</span>        Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.2加载配置文件，转换为一个集合</span>        <span class="token comment" spellcheck="true">//1.2.1获取class目录下的配置文件  使用类加载器</span>        ClassLoader classLoader <span class="token operator">=</span> ReflectTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream is <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"pro.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//2.获取配置文件中定义的数据</span>        String className <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String methodName <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"methodName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//3.加载该类进内存</span>        Class <span class="token class-name">cls</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.创建对象</span>        Object obj <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.获取方法对象</span>        Method method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6.执行方法</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-2-4-运行结果"><a href="#4-2-4-运行结果" class="headerlink" title="4.2.4 运行结果"></a>4.2.4 运行结果</h3><p><img src="https://note.youdao.com/yws/public/resource/128508bf6a04968eced81ede9ac1b304/xmlnote/227D210812A544E191017FDCC65624C3/10876"></p><h3 id="4-2-5-修改配置文件，再次运行"><a href="#4-2-5-修改配置文件，再次运行" class="headerlink" title="4.2.5 修改配置文件，再次运行"></a>4.2.5 修改配置文件，再次运行</h3><p>将配置文件内的信息修改为Student类及类内的方法</p><pre class=" language-java"><code class="language-java">className <span class="token operator">=</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>StudentmethodName <span class="token operator">=</span> study</code></pre><p><img src="https://note.youdao.com/yws/public/resource/128508bf6a04968eced81ede9ac1b304/xmlnote/F6C661A2F111493E9CF3E19C09F575A1/10882"></p><h2 id="4-3-好处"><a href="#4-3-好处" class="headerlink" title="4.3 好处"></a>4.3 好处</h2><p>我们这样做有什么好处呢，对于框架来说，是人家封装好的，我们拿来直接用就可以了，而不能去修改框架内的代码。但如果我们使用传统的new形式来实例化，那么当类名更改时我们就要修改Java代码，这是很繁琐的。修改Java代码以后我们还要进行测试，重新编译、发布等等一系列的操作。而如果我们仅仅只是修改配置文件，就来的简单的多，配置文件就是一个实实在在的物理文件。<br>此外使用反射还能达到解耦的效果。假设我们使用的是new这种形式进行对象的实例化，此时如果在项目的某一个小模块中我们的一个实例类丢失了，那么在编译期间就会报错，以导致整个项目无法启动。而对于反射创建对象Class.forName(“全类名”);这种形式，我们在编译期需要的仅仅只是一个字符串（全类名），在编译期不会报错，这样其他的模块就可以正常的运行，而不会因为一个模块的问题导致整个项目崩溃。这就是Spring框架中IOC控制反转的本质。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反射机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中的常用注解</title>
      <link href="post/spring-zhong-de-chang-yong-zhu-jie/"/>
      <url>post/spring-zhong-de-chang-yong-zhu-jie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-第一步导包"><a href="#1-第一步导包" class="headerlink" title="1. 第一步导包"></a>1. 第一步导包</h2><p><img src="https://img-blog.csdnimg.cn/20191106115900164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTE1MTk2MA==,size_16,color_FFFFFF,t_70"><br>首先需要导入这四个包以及日志文件（slf4j-log4j12-1.7.5.jar）</p><h2 id="2-配置xml文件"><a href="#2-配置xml文件" class="headerlink" title="2.配置xml文件"></a>2.配置xml文件</h2><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">--</span>配置文件信息<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsdhttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token punctuation">.</span>xsd"<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 开启注解功能 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>context<span class="token operator">:</span>annotation<span class="token operator">-</span>config<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>annotation<span class="token operator">-</span>config<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 开启注解扫描功能，该包下所有的<span class="token annotation punctuation">@Component</span>     <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.hisoft"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>context<span class="token operator">:</span>componet<span class="token operator">-</span>scan<span class="token operator">></span> 具有 <span class="token operator">&lt;</span>context<span class="token operator">:</span>annotation<span class="token operator">-</span>config<span class="token operator">></span> 作用 ！ 所以第一步开启注解功能也可以省略<span class="token operator">--</span><span class="token operator">></span></code></pre><p><strong>配置本地提示：</strong><br><img src="https://img-blog.csdnimg.cn/20191106120248470.png"></p><h2 id="3-常用注解"><a href="#3-常用注解" class="headerlink" title="3.常用注解"></a>3.常用注解</h2><ul><li>@Component 这种注解可以在dao层或者service层等都可以使用，没有限制，有三种使用方式<pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Component</span>  <span class="token comment" spellcheck="true">//默认id为类名首字母变小写</span>  <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"usermapper"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//设置id名称</span>  <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"usermapper"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置id名称</span></code></pre>实际开发中，使用的是@Component三个衍生注解（“子注解”）<br>子注解的作用：有分层的意义（分层注解）。<br><img src="https://img-blog.csdnimg.cn/2019110612095536.png"></li></ul><ul><li>简单数据类型依赖注入</li></ul><pre class=" language-java"><code class="language-java">     <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//直接给属性注入值</span>     String name<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>     String password<span class="token punctuation">;</span>     其实这种方式是等价于  String name <span class="token operator">=</span> <span class="token string">"张三"</span>；</code></pre><ul><li>复杂类型数据依赖注入</li></ul><p>** 第一种： 使用@Value 结合SpEL #｛｝ —- spring3.0 后用 Service层注入dao层**</p><pre class=" language-java"><code class="language-java">    dao层    <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"usermapper"</span><span class="token punctuation">)</span>    service层     <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{usermapper}"</span><span class="token punctuation">)</span>     UserMapperImpl usermapper<span class="token punctuation">;</span></code></pre><p>** 第二种：使用@Autowired 或者结合 @Qualifier**</p><p>单独使用@Autowired 按照类型注入<br><img src="https://img-blog.csdnimg.cn/20191106121703992.png"></p><p>使用@Autowired + @ Qualifier 按照名称注入<br><img src="https://img-blog.csdnimg.cn/2019110612171283.png"></p><p>** 第三种： JSR-250标准（jdk） 提供@Resource**<br><img src="https://img-blog.csdnimg.cn/20191106121909462.png"></p><p>** 第四种： JSR-330标准（jdk） 提供 @Inject （麻烦点）不推荐（了解）**<br>需要先导入 javax.inject 的 jar （废掉了）</p><p>按照类型注入<br><img src="https://img-blog.csdnimg.cn/20191106121922326.png"></p><p>按照名称注入<br><img src="https://img-blog.csdnimg.cn/20191106121926986.png"></p><h2 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h2><p><img src="https://img-blog.csdnimg.cn/20191106121950983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTE1MTk2MA==,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 添加admin后台</title>
      <link href="post/23abcb74/"/>
      <url>post/23abcb74/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="为hexo添加hexo-admin组件"><a href="#为hexo添加hexo-admin组件" class="headerlink" title="为hexo添加hexo-admin组件"></a>为hexo添加hexo-admin组件</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;已安装好hexo，选择好自己的主题(我选择的主题是metary)，并部署到GitHub等静态托管服务器上<br>已安装好hexo，选择好自己的主题(我选择的主题是metary)，并部署到GitHub等静态托管服务器上</p><h2 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hexo-admin 是一个Hexo博客引擎的管理用户界面插件。这个插件最初是作为本地编辑器设计的，在本地运行hexo使用hexo-admin编写文章，然后通过hexo g或hexo d（hexo g是本地渲染，hexo d是将渲染的静态页面发布到GitHub）将生成的静态页面发布到GitHub等静态服务器。如果你使用的是非静态托管服务器，比如自己买的主机搭建的hexo，那么一定要设置hexo-admin 的密码，否则谁都可以编辑你的文章。</p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><ol><li>首先进入hexo创建的博客项目的根目录下，执行<br><code> npm install --save hexo-admin</code><br>mac可能需要root权限，前面加个sudo 就可以了。如果报错缺少组件，则缺少什么安装什么，npm install 加缺少的组件。</li><li>运行下列命令启动hexo-admin:<br>hexo server -d<br>打开 <a href="http://localhost:4000/admin/">http://localhost:4000/admin/</a> 就可以访问到hexo-admin管理页面了。</li></ol><h2 id="密码保护"><a href="#密码保护" class="headerlink" title="密码保护"></a>密码保护</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;打开setting，点击Setup authentification here输入用户名，密码，密钥，下面会自动生成配置文件，复制加在hexo根目录下的_config.yml中： </p><pre><code>admin:  username: myfavoritename  password_hash: be121740bf988b2225a313fa1f107ca1  secret: a secret something</code></pre><p> 重启hexo，就可以看到登录页面了</p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;进入后台之后点击Deploy，里面的Deploy按钮是用来执行发布脚本的，所以我们先在博客根目录下新建个目录admin_script，然后在目录中新建一个脚本hexo-d.sh，里面写下下面代码然后保存<br><code>hexo g &amp;&amp; hexo d</code><br>然后给hexo-g.sh加入可执行权限<br><code>chmod +x hexo-d.sh</code><br>然后在_config.yml中的admin下添加</p><pre><code>admin:  username: myfavoritename  password_hash: be121740bf988b2225a313fa1f107ca1  secret: a secret something  deployCommand: ./admin_script/hexo-d.sh</code></pre><p>设置发布执行的脚本，点击Deploy就会执行这个命令并提交到GitHub上。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
